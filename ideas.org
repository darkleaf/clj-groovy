* POJO

Нужно везде проставить POJO & CompileStatic.
Где нужно выставить CompileDynamic.

Может быть поумолчанию проставлять POJO?
Но как тогда снимать где нужно?

Оно так-то в инкубаторе, но наверное ничего страшного.

Смысл POJO - только не зависить от рантайма груви, а мы зависим.

https://issues.apache.org/jira/browse/GROOVY-7492

#+begin_quote
This opens up some of Groovy's powerful transforms to the wider Java community.
Groovy can effectively be used as a Lombok-style pre-processor for some Java classes.
#+end_quote

* надо разобраться как методы вызываются

Eсли он реализует интерфейс, то неважно как он скомпилен, динамически или статически.

И не обязательно ставить ~@POJO~.

Нужно разобраться.

* api для интеропа

~clojure.java.api.Clojure.var~. Тут нужно явно делать require.
Но уже есть ~requiring-resolve~.
Надо на его основе сделать.

И наверное это просто класс с статическими методами

+ ns
  + пример
    ~def foo = ns 'clojure.core' key 'foo'~, вроде бы можно такой dsl сделать.
  + var
  + key
  + sym
  + ns ? типа сам объект неймспейса возвращать, для работы с функциями ~ns-imports~ и т.п.
+ read
  просто прочитать, пусть будет

Внутри понятно, нужно будет использовать ~Clojure.var~.

* ns

#+begin_src groovy
 ns1 = ns 'foo.bar'
 IFn = ns1.var /x->y/
 Keyword = ns1.keyword /z->v/
 Symbol =  ns1.symbol />>/
#+end_src

Но, вроде бы не стоит полагаться на сами классы, лучше использовать кложовые функции.

типа ~my_var.with(deref)~ лучше, чем ~my_var.deref()~

* макрос ..

#+begin_src clojure
  (g/.. obj (a 42) (b "xxx"))
#+end_src

через InvokeHelper видимо, там есть такой метод для вызова груви методов

еще наверное нужно проперти предусмотреть. Статические методы должны сами заработать.


Вот тут можно подсмотреть идеи
https://github.com/clj-python/libpython-clj


* TODO проставлять arglist и метаданые

Как-то определять списко параметорв и формировать метаданные.

Может быть даже как-то docstring присобачить.
Например, брать из поля скрипта.

Может быть просто прописывать метаданные вручную, в каком-то методе,
но только groovy структурами, а не кложовыми.

#+begin_src groovy
  new Fn() {
    def meta = read("""
      {:arglists (() (x))}
    """)

    def docstring = """
    """

    // или даже сразу класс писать вместо строки
    def tag = "java.lang.String"


    def invoke() {
    }

    def invoke(x) {
    }
  }
#+end_src


Можно даже не делать свой класс, а брать атрибуты через InvokeHelper.
И наверное эти атрибуты должны быть статическими?

Можно интерфейс сделать с дефолтными методами. И доставать мету, не только для функций.

С другой стороны, может быть мету вешать прямо на var в clj файле?


вот так работает, если добавить ~configuration.parameters = true~
#+begin_src clojure
  (->> gr-1
       class
       .getDeclaredMethods
       (filter #(= "invoke" (.getName %)))
       (map #(.getParameters %))
       (map (fn [params]
               (map #(-> % .getName symbol) params))))

  ;; нужно еще отдельно обрабатывать &
#+end_src

* TODO проверки

проверять имя класса и пакет
наверное уже в clj,
но может быть и в груви что-то можно подкрутить

Сейчас я явно импортирую тот класс, что ожидаю, и будет ошибка.
Она не очень информативна, но уже ок.


* compile

когда компилим кложовый неймспейс - компилим и груви.

#+begin_src clojure
  (when *compile-files*)
#+end_src

#+begin_src clojure
  (defn get-proxy-class
    [& bases]
    (let [[super interfaces] (get-super-and-interfaces bases)
          pname (proxy-name super interfaces)]
      (or (RT/loadClassForName pname)
          (let [[cname bytecode] (generate-proxy super interfaces)]
            (. ^DynamicClassLoader (deref clojure.lang.Compiler/LOADER) (defineClass pname bytecode [super interfaces]))))))
#+end_src

~(or (RT/loadClassForName pname) ,,,)~


* TODO написать тест для tap

* TODO defclasses

#+begin_src clojure
  (g/defclasses "FileName") ;; именно строкой, а зачем? оно и так class_es
#+end_src

загружать все классы

делать ли конструкторы?


тут проблема в том, что если делать компиляцию в class файлы,
то нужно сначала попробовать их загрузить, а уже потом компилировать.
И нужно знать имена классов.

И это ничем особо не отличается от обычного и простого defclass
